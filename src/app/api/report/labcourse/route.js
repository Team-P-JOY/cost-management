import { NextResponse } from "next/server";
import { executeQuery } from "@/lib/oracle";

async function getReg(courseId, semester, acadyear) {
  return await executeQuery(
    `SELECT *
    FROM PBL_AVSREGCLASS_V 
    WHERE COURSEID = :courseId
    AND SEMESTER = :semester
    AND ACADYEAR = :acadyear
    ORDER BY ACADYEAR DESC, SEMESTER DESC`,
    { courseId, semester, acadyear }
  );
}

async function getUser(labId) {
  return await executeQuery(
    `SELECT PERSON.TITLE_NAME || PERSON.FIRST_NAME || ' ' || PERSON.LAST_NAME AS FULLNAME,
    LAB.ROLE_ID,
    ROLE.LABCOURSE_ROLE_NAME
    FROM CST_LABCOURSE_USER LAB
    LEFT JOIN PBL_VPER_PERSON PERSON 
        ON LAB.PERSON_ID = PERSON.PERSON_ID
    INNER JOIN CST_LABCOURSE_ROLE ROLE
        ON LAB.ROLE_ID = ROLE.LABCOURSE_ROLE_ID
    WHERE LAB.LAB_ID = :labId
    AND LAB.FLAG_DEL = 0`,
    { labId }
  );
}

async function getAsset(labId) {
  return await executeQuery(
    `SELECT ASSET.ASSET_ID,
    ASSETINV.ASSET_NAME_TH,
    ASSETINV.ASSET_NAME_ENG,
    BRAND.BRAND_NAME,
    ASSET.AMOUNT,
    ASSETINV.UNIT_PRICE,
    ASSETINV.PACK_PRICE,
    ASSET.ASSET_REMARK,
    INVTYPE.INVTYPE_NAME
    FROM CST_LABCOURSE_ASSET ASSET
    INNER JOIN CST_INVASSET ASSETINV
        ON ASSET.ASSET_ID = ASSETINV.ASSET_ID
    INNER JOIN CST_INVBRAND BRAND
        ON ASSETINV.BRAND_ID = BRAND.BRAND_ID
    INNER JOIN CST_INVTYPE INVTYPE 
        ON ASSETINV.INVTYPE_ID=INVTYPE.INVTYPE_ID
    WHERE ASSET.LAB_ID = :labId
    AND ASSET.FLAG_DEL = 0`,
    { labId }
  );
}

async function getLabjob(labId) {
  let labjob = await executeQuery(
    `SELECT JOB.LABJOB_ID, JOB.LABJOB_TITLE,
      PERSON.TITLE_NAME || PERSON.FIRST_NAME || ' ' || PERSON.LAST_NAME AS FULLNAME
      FROM CST_LABJOB JOB
      LEFT JOIN PBL_VPER_PERSON PERSON 
        ON JOB.PERSON_ID = PERSON.PERSON_ID
      WHERE JOB.LAB_ID = :labId
      AND JOB.FLAG_DEL = 0`,
    { labId }
  );

  labjob = await Promise.all(
    labjob.map(async (item) => {
      return { ...item, asset: await getLabjobAsset(item.labjobId) };
    })
  );

  return labjob;
}

async function getLabjobAsset(labjobId) {
  return await executeQuery(
    `SELECT ASSET.ASSET_ID,
    ASSETINV.ASSET_NAME_TH,
    ASSETINV.ASSET_NAME_ENG,
    BRAND.BRAND_NAME,
    ASSET.AMOUNT_USED,
    ASSETINV.UNIT_PRICE,
    ASSETINV.PACK_PRICE,
    ASSET.ASSET_USED_REMARK,
        INVTYPE.INVTYPE_NAME
    FROM CST_LABJOB_ASSET ASSET
    INNER JOIN CST_INVASSET ASSETINV
        ON ASSET.ASSET_ID = ASSETINV.ASSET_ID
    INNER JOIN CST_INVBRAND BRAND
        ON ASSETINV.BRAND_ID = BRAND.BRAND_ID
    INNER JOIN CST_INVTYPE INVTYPE 
        ON ASSETINV.INVTYPE_ID=INVTYPE.INVTYPE_ID
    WHERE ASSET.LABJOB_ID = :labjobId
    AND ASSET.FLAG_DEL = 0`,
    { labjobId }
  );
}

async function getProgramEnroll(labId) {
  return await executeQuery(
    `SELECT   COUNT(E.STUDENTID) AS COUNTSTD  ,  P.PROGRAMID  , P.PROGRAMNAME 
    FROM CST_LABCOURSE  A  INNER JOIN PBL_AVSREGENROLLSUMMARY_V  E 
    ON  A.COURSEID=E.COURSEID  AND A.ACADYEAR=E.ACADYEAR  AND A.SEMESTER = E.SEMESTER
    INNER JOIN PBL_STUDENTMASTER_V S  ON E.STUDENTID=S.STUDENTID 
    INNER JOIN PBL_PROGRAM_V P  ON S.PROGRAMID=P.PROGRAMID
    WHERE LAB_ID = :labId GROUP BY   P.PROGRAMID, P.PROGRAMNAME `,
    { labId }
  );
}

async function getFacultyEnroll(labId) {
  return await executeQuery(
    `SELECT   COUNT(E.STUDENTID) AS COUNTSTD  ,  F.FACULTYID  , F.FACULTYNAME 
    FROM CST_LABCOURSE  A  INNER JOIN PBL_AVSREGENROLLSUMMARY_V  E 
    ON  A.COURSEID=E.COURSEID  AND A.ACADYEAR=E.ACADYEAR  AND A.SEMESTER = E.SEMESTER
    INNER JOIN PBL_STUDENTMASTER_V S  ON E.STUDENTID=S.STUDENTID 
    INNER JOIN PBL_FACULTY_V  F  ON S.FACULTYID=F.FACULTYID
    WHERE LAB_ID = :labId GROUP BY F.FACULTYID, F.FACULTYNAME `,
    { labId }
  );
}
async function getEquipment(labId) {
  return await executeQuery(
    `WITH ENROLL_SUM AS (
  SELECT COURSEID, SEMESTER, ACADYEAR, SUM(ENROLLSEAT) AS ENROLLSEAT
  FROM PBL_AVSREGCLASS_V  
  GROUP BY COURSEID, SEMESTER, ACADYEAR
)
SELECT 
  LJ.LAB_ID,
  CAS.ASSET_ID,
  CAS.ASSET_NAME_TH,
  CAS.ASSET_NAME_ENG,
  CAS.AMOUNT_UNIT,
  LB.COURSEID,
  MAX(LB.SEMESTER) AS SEMESTER,
  MAX(LB.ACADYEAR) AS ACADYEAR,
  MAX(CAS.INVTYPE_ID) AS INVTYPE_ID,
  SUM(LJA.AMOUNT_USED) AS TOTAL_AMOUNT_USED,
  MAX(LJA.UNIT_PRICE) AS UNIT_PRICE,
  SUM(LJA.AMOUNT_USED * LJA.UNIT_PRICE) AS ITEM_TOTAL,
  ROUND(SUM(LJA.AMOUNT_USED * LJA.UNIT_PRICE) / (5 * 365 * 24), 2) AS COST_PER_HOUR_5Y,
  ROUND(SUM(LJA.AMOUNT_USED * LJA.UNIT_PRICE) / (5 * 365 * 24) * LB.HOUR, 2) AS Price_semester,
  ES.ENROLLSEAT,
  ROUND(SUM(LJA.AMOUNT_USED * LJA.UNIT_PRICE) / (5 * 365 * 24) * LB.HOUR / ES.ENROLLSEAT, 2) AS Cost_per_hour_total_students
FROM CST_LABJOB_ASSET LJA
INNER JOIN CST_INVASSET CAS ON CAS.ASSET_ID = LJA.ASSET_ID
INNER JOIN CST_LABJOB LJ ON LJA.LABJOB_ID = LJ.LABJOB_ID
INNER JOIN CST_LABCOURSE LB ON LJ.LAB_ID = LB.LAB_ID
LEFT JOIN ENROLL_SUM ES ON ES.COURSEID = LB.COURSEID
                        AND ES.SEMESTER = LB.SEMESTER
                        AND ES.ACADYEAR = LB.ACADYEAR
WHERE  LB.LAB_ID = :labId  
  AND CAS.INVTYPE_ID = 1
GROUP BY LJ.LAB_ID, CAS.ASSET_ID, CAS.ASSET_NAME_TH, LB.HOUR, ES.ENROLLSEAT,LB.COURSEID ,CAS.AMOUNT_UNIT,CAS.ASSET_NAME_ENG
ORDER BY LJ.LAB_ID, ITEM_TOTAL DESC `,
    { labId }
  );
}
async function getSupplies(labId) {
  return await executeQuery(
    `WITH ENROLL_SUM AS (
  SELECT COURSEID, SEMESTER, ACADYEAR, SUM(ENROLLSEAT) AS ENROLLSEAT
  FROM PBL_AVSREGCLASS_V  
  GROUP BY COURSEID, SEMESTER, ACADYEAR
)
SELECT 
  LJ.LAB_ID,
  CAS.ASSET_ID,
  CAS.PACK_PRICE,
  CAS.ASSET_NAME_TH,
  CAS.ASSET_NAME_ENG,
  CAS.AMOUNT_UNIT,
  LB.COURSEID,
  MAX(LB.SEMESTER) AS SEMESTER,
  MAX(LB.ACADYEAR) AS ACADYEAR,
  MAX(CAS.INVTYPE_ID) AS INVTYPE_ID,
  SUM(LJA.AMOUNT_USED) AS AMOUNT_USED,
  MAX(LJA.UNIT_PRICE) AS UNIT_PRICE,
  SUM(LJA.AMOUNT_USED * LJA.UNIT_PRICE) AS ITEM_TOTAL,  
  ES.ENROLLSEAT,
  ROUND(SUM(LJA.AMOUNT_USED * LJA.UNIT_PRICE)/ ES.ENROLLSEAT, 2) AS PRICE_STD
FROM CST_LABJOB_ASSET LJA
INNER JOIN CST_INVASSET CAS ON CAS.ASSET_ID = LJA.ASSET_ID
INNER JOIN CST_LABJOB LJ ON LJA.LABJOB_ID = LJ.LABJOB_ID
INNER JOIN CST_LABCOURSE LB ON LJ.LAB_ID = LB.LAB_ID
LEFT JOIN ENROLL_SUM ES ON ES.COURSEID = LB.COURSEID
                        AND ES.SEMESTER = LB.SEMESTER
                        AND ES.ACADYEAR = LB.ACADYEAR
WHERE  LB.LAB_ID = :labId  
  AND CAS.INVTYPE_ID = 3
GROUP BY LJ.LAB_ID, CAS.ASSET_ID, CAS.ASSET_NAME_TH, LB.HOUR, ES.ENROLLSEAT,LB.COURSEID ,CAS.AMOUNT_UNIT, CAS.PACK_PRICE,CAS.ASSET_NAME_ENG
ORDER BY LJ.LAB_ID, ITEM_TOTAL DESC `,
    { labId }
  );
}
async function getDurableitems(labId) {
  return await executeQuery(
    `WITH ENROLL_SUM AS (
  SELECT COURSEID, SEMESTER, ACADYEAR, SUM(ENROLLSEAT) AS ENROLLSEAT
  FROM PBL_AVSREGCLASS_V  
  GROUP BY COURSEID, SEMESTER, ACADYEAR
)
SELECT 
  LJ.LAB_ID,
  CAS.ASSET_ID,
  CAS.ASSET_NAME_TH,
  CAS.ASSET_NAME_ENG,
  CAS.PACK_PRICE,
  CAS.AMOUNT_UNIT,
  LB.COURSEID,
  MAX(LB.SEMESTER) AS SEMESTER,
  MAX(LB.ACADYEAR) AS ACADYEAR,
  MAX(CAS.INVTYPE_ID) AS INVTYPE_ID,
  SUM(LJA.AMOUNT_USED) AS AMOUNT_USED,
  MAX(LJA.UNIT_PRICE) AS UNIT_PRICE,
  SUM(LJA.AMOUNT_USED * LJA.UNIT_PRICE) AS ITEM_TOTAL,
  ROUND(SUM(LJA.AMOUNT_USED * LJA.UNIT_PRICE) / (5 * 365 * 24), 2) AS COST_PER_HOUR_5Y,
  ROUND(SUM(LJA.AMOUNT_USED * LJA.UNIT_PRICE) / (5 * 365 * 24) * MAX(LJA.HOUR_USED), 2) AS Price_semester,
  ES.ENROLLSEAT,
  MAX(LJA.HOUR_USED) AS HOUR_USED,
  ROUND(SUM(LJA.AMOUNT_USED * LJA.UNIT_PRICE) / (5 * 365 * 24) * MAX(LJA.HOUR_USED) / ES.ENROLLSEAT, 2) AS COST_STD
FROM CST_LABJOB_ASSET LJA
INNER JOIN CST_INVASSET CAS ON CAS.ASSET_ID = LJA.ASSET_ID
INNER JOIN CST_LABJOB LJ ON LJA.LABJOB_ID = LJ.LABJOB_ID
INNER JOIN CST_LABCOURSE LB ON LJ.LAB_ID = LB.LAB_ID
LEFT JOIN ENROLL_SUM ES ON ES.COURSEID = LB.COURSEID
                        AND ES.SEMESTER = LB.SEMESTER
                        AND ES.ACADYEAR = LB.ACADYEAR
WHERE  LB.LAB_ID = :labId  
  AND CAS.INVTYPE_ID = 2
GROUP BY LJ.LAB_ID, CAS.ASSET_ID, CAS.ASSET_NAME_TH, LB.HOUR, ES.ENROLLSEAT,LB.COURSEID ,CAS.PACK_PRICE,CAS.AMOUNT_UNIT,CAS.ASSET_NAME_ENG
ORDER BY LJ.LAB_ID, ITEM_TOTAL DESC `,
    { labId }
  );
}
async function getFacproReport(labId) {
  return await executeQuery(
    `SELECT F.FACULTYID, F.FACULTYNAME,CST.pricePer_Term_INVTYPE1 , CST.pricePer_Term_INVTYPE2 ,  CST.pricePer_Term_INVTYPE3 , COUNT(E.STUDENTID) AS COUNTSTD  , 
     P.PROGRAMGROUP  , P.PROGRAMNAME  ,  SUM(COUNT(E.STUDENTID)) OVER () as total_enroll ,
    ROUND((CST.pricePer_Term_INVTYPE1 /SUM(COUNT(E.STUDENTID)) OVER ()   )* COUNT(E.STUDENTID ),2  )as  cost_perProgram1 , 
    ROUND((CST.pricePer_Term_INVTYPE2 /SUM(COUNT(E.STUDENTID)) OVER ()   )* COUNT(E.STUDENTID ),2  )as  cost_perProgram2 , 
    ROUND((CST.pricePer_Term_INVTYPE3   /SUM(COUNT(E.STUDENTID)) OVER ()   )* COUNT(E.STUDENTID ),2  )as  cost_perProgram3 
    FROM CST_LABCOURSE  A  
    INNER JOIN PBL_AVSREGENROLLSUMMARY_V  E ON  A.COURSEID=E.COURSEID  
          AND A.ACADYEAR=E.ACADYEAR  AND A.SEMESTER = E.SEMESTER
    INNER JOIN PBL_STUDENTMASTER_V S  ON E.STUDENTID=S.STUDENTID 
    INNER JOIN PBL_FACULTY_V  F  ON S.FACULTYID=F.FACULTYID
    INNER JOIN PBL_PROGRAM_V P  ON S.PROGRAMID=P.PROGRAMID
    INNER JOIN  (
    SELECT 
        A.LAB_ID,
        ROUND(SUM(CASE WHEN C.INVTYPE_ID = 1 THEN (B.HOUR_USED * (B.AMOUNT_USED * B.UNIT_PRICE) / (5 * 365 * 24)) ELSE 0 END), 2) AS pricePer_Term_INVTYPE1,
        ROUND(SUM(CASE WHEN C.INVTYPE_ID = 2 THEN (B.HOUR_USED * (B.AMOUNT_USED * B.UNIT_PRICE) / (5 * 365 * 24)) ELSE 0 END), 2) AS pricePer_Term_INVTYPE2,
        SUM(CASE WHEN C.INVTYPE_ID = 3 THEN B.AMOUNT_USED * B.UNIT_PRICE ELSE 0 END) AS pricePer_Term_INVTYPE3
    FROM 
        cst_labjob A
    INNER JOIN 
        cst_labjob_asset B ON A.LABJOB_ID = B.LABJOB_ID
    INNER JOIN 
        cst_invasset C ON B.ASSET_ID = C.ASSET_ID
    WHERE 
        A.LAB_ID = :labId
    GROUP BY 
        A.LAB_ID) CST   on  A.LAB_ID=CST.LAB_ID
    GROUP BY   F.FACULTYID, F.FACULTYNAME,P.PROGRAMGROUP, P.PROGRAMNAME   , CST.LAB_ID , CST.pricePer_Term_INVTYPE1 , CST.pricePer_Term_INVTYPE2 , CST.pricePer_Term_INVTYPE3 `,
    { labId }
  );
}
async function getFacproReport2(labId) {
  return await executeQuery(
    `SELECT F.FACULTYID, F.FACULTYNAME,CST.pricePer_Term_INVTYPE1 , CST.pricePer_Term_INVTYPE2 ,  CST.pricePer_Term_INVTYPE3 , COUNT(E.STUDENTID) AS COUNTSTD  , 
     P.PROGRAMGROUP  , P.PROGRAMNAME  ,  SUM(COUNT(E.STUDENTID)) OVER () as total_enroll ,
    ROUND((CST.pricePer_Term_INVTYPE1 /SUM(COUNT(E.STUDENTID)) OVER ()   )* COUNT(E.STUDENTID ),2  )as  cost_perProgram1 , 
    ROUND((CST.pricePer_Term_INVTYPE2 /SUM(COUNT(E.STUDENTID)) OVER ()   )* COUNT(E.STUDENTID ),2  )as  cost_perProgram2 , 
    ROUND((CST.pricePer_Term_INVTYPE3   /SUM(COUNT(E.STUDENTID)) OVER ()   )* COUNT(E.STUDENTID ),2  )as  cost_perProgram3 
    FROM CST_LABCOURSE  A  
    INNER JOIN PBL_AVSREGENROLLSUMMARY_V  E ON  A.COURSEID=E.COURSEID  
          AND A.ACADYEAR=E.ACADYEAR  AND A.SEMESTER = E.SEMESTER
    INNER JOIN PBL_STUDENTMASTER_V S  ON E.STUDENTID=S.STUDENTID 
    INNER JOIN PBL_FACULTY_V  F  ON S.FACULTYID=F.FACULTYID
    INNER JOIN PBL_PROGRAM_V P  ON S.PROGRAMID=P.PROGRAMID
    INNER JOIN  (
    SELECT 
        A.LAB_ID,
        ROUND(SUM(CASE WHEN C.INVTYPE_ID = 1 THEN (B.HOUR_USED * (B.AMOUNT_USED * B.UNIT_PRICE) / (5 * 365 * 24)) ELSE 0 END), 2) AS pricePer_Term_INVTYPE1,
        ROUND(SUM(CASE WHEN C.INVTYPE_ID = 2 THEN (B.HOUR_USED * (B.AMOUNT_USED * B.UNIT_PRICE) / (5 * 365 * 24)) ELSE 0 END), 2) AS pricePer_Term_INVTYPE2,
        SUM(CASE WHEN C.INVTYPE_ID = 3 THEN B.AMOUNT_USED * B.UNIT_PRICE ELSE 0 END) AS pricePer_Term_INVTYPE3
    FROM 
        cst_labjob A
    INNER JOIN 
        cst_labjob_asset B ON A.LABJOB_ID = B.LABJOB_ID
    INNER JOIN 
        cst_invasset C ON B.ASSET_ID = C.ASSET_ID
    LEFT JOIN CST_LABCOURSE J  ON A.LAB_ID = J.LAB_ID
    WHERE 
        (A.LAB_ID = :labId OR J.LAB_PARENT_ID = :labId ) AND A.FLAG_DEL = 0 AND B.FLAG_DEL = 0
    GROUP BY   A.LAB_ID) CST   on  A.LAB_ID=CST.LAB_ID
    GROUP BY   F.FACULTYID, F.FACULTYNAME,P.PROGRAMGROUP, P.PROGRAMNAME   , CST.LAB_ID , CST.pricePer_Term_INVTYPE1 , CST.pricePer_Term_INVTYPE2 , CST.pricePer_Term_INVTYPE3 `,
    { labId }
  );
}

export async function GET(req) {
  try {
    const id = req.nextUrl.searchParams.get("id");

    if (!id) {
      return NextResponse.json(
        { success: false, message: "ID is required" },
        { status: 400 }
      );
    }
    const data = await executeQuery(
      `SELECT LAB.LAB_ID, 
      LAB.COURSEID, 
      LAB.LABGROUP_ID,
      LAB.PERSON_ID,

      COURSE.COURSECODE AS COURSECODE, 
      COURSE.COURSENAME AS COURSENAME,
      COURSE.COURSENAMEENG AS COURSENAMEENG,
      FAC.FACULTYNAME, 
      LABGROUP.LABGROUP_NAME,
      PERSON.TITLE_NAME || PERSON.FIRST_NAME || ' ' || PERSON.LAST_NAME AS FULLNAME, 
      LAB.ACADYEAR,
      LAB.SEMESTER,
      LAB.SECTION,
      LAB.LABROOM,
      LAB.HOUR,
      LAB.LABGROUP_NUM

      FROM CST_LABCOURSE LAB
      INNER JOIN PBL_AVSREGCOURSE_V COURSE
        ON COURSE.COURSEID = LAB.COURSEID
      LEFT JOIN PBL_FACULTY_V FAC 
        ON COURSE.FACULTYID = FAC.FACULTYID
      LEFT JOIN CST_LABGROUP LABGROUP
        ON LAB.LABGROUP_ID = LABGROUP.LABGROUP_ID
      LEFT JOIN PBL_VPER_PERSON PERSON 
        ON LAB.PERSON_ID = PERSON.PERSON_ID
      WHERE LAB.LAB_ID = :id`,
      { id }
    );
    return NextResponse.json({
      success: true,
      data: data,
      faculty: await getFacultyEnroll(id),
      program: await getProgramEnroll(id),
      reg:
        data.length > 0 &&
        (await getReg(data[0].courseid, data[0].semester, data[0].acadyear)),
      user: await getUser(id),
      asset: await getAsset(id),
      labjob: await getLabjob(id),
      equipment: await getEquipment(id),
      supplies: await getSupplies(id),
      durableitems: await getDurableitems(id),
      facproReport: await getFacproReport(id),
      facproReport2: await getFacproReport2(id),
    });
  } catch (error) {
    return NextResponse.json(
      { success: false, message: "Database Error", error },
      { status: 500 }
    );
  }
}
